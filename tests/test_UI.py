import itertools
import os, sys
# modify default path so we can import from pgactivity package
sys.path.insert(0, os.path.abspath('..'))
from pgactivity.UI import UI, bytes2human, PGTOP_COLS
from pgactivity import __version__

def test_bytes2human():
    samples = [(131,                        '131.00B')
             , (1049,                       '1.02K')
             , (58812,                      '57.43K')
             , (68819826,                   '65.63M')
             , (39756861649,                '37.03G')
             , (18754875155724,             '17.06T')
             , (19805112159461476,          '17.59P')
             , (18605121065461476951,       '16.14E')
             , (15774052159461478078195,    '13.36Z')
             , (18405282153331478078187521, '15.22Y')]

    for case, expected_result in samples:
        assert bytes2human(case) == expected_result, 'bytes2human fail'


def test_get_flag_from_options():
    """tests get_flag_from_options method against every
    possible combination of options it can receive
    (options.nodb, options.nouser etc.), both in cases when
    we work with remote and local database.
    """
    variants = itertools.product([True, False], repeat=9)
    class Options:
        def __init__(self, args):
            (self.nodb,
             self.nouser,
             self.nocpu,
             self.noclient,
             self.nomem,
             self.noread,
             self.nowrite,
             self.notime,
             self.nowait) = args
    
    all_option_combinations = [Options(i) for i in variants]

    ui = UI(__version__)
    getflag = ui.get_flag_from_options

    ui.is_local = False  # test for remote db
    result_remote = [getflag(case) for case in all_option_combinations]

    ui.is_local = True  # test for local db
    result_local = [getflag(case) for case in all_option_combinations]

    expected_remote = [
          3584, 3840, 3712, 3968, 3584, 3840, 3712, 3968, 3584, 3840, 3712,
          3968, 3584, 3840, 3712, 3968, 3584, 3840, 3712, 3968, 3584, 3840,
          3712, 3968, 3584, 3840, 3712, 3968, 3584, 3840, 3712, 3968, 3586,
          3842, 3714, 3970, 3586, 3842, 3714, 3970, 3586, 3842, 3714, 3970,
          3586, 3842, 3714, 3970, 3586, 3842, 3714, 3970, 3586, 3842, 3714,
          3970, 3586, 3842, 3714, 3970, 3586, 3842, 3714, 3970, 3584, 3840,
          3712, 3968, 3584, 3840, 3712, 3968, 3584, 3840, 3712, 3968, 3584,
          3840, 3712, 3968, 3584, 3840, 3712, 3968, 3584, 3840, 3712, 3968,
          3584, 3840, 3712, 3968, 3584, 3840, 3712, 3968, 3586, 3842, 3714,
          3970, 3586, 3842, 3714, 3970, 3586, 3842, 3714, 3970, 3586, 3842,
          3714, 3970, 3586, 3842, 3714, 3970, 3586, 3842, 3714, 3970, 3586,
          3842, 3714, 3970, 3586, 3842, 3714, 3970, 3588, 3844, 3716, 3972,
          3588, 3844, 3716, 3972, 3588, 3844, 3716, 3972, 3588, 3844, 3716,
          3972, 3588, 3844, 3716, 3972, 3588, 3844, 3716, 3972, 3588, 3844,
          3716, 3972, 3588, 3844, 3716, 3972, 3590, 3846, 3718, 3974, 3590,
          3846, 3718, 3974, 3590, 3846, 3718, 3974, 3590, 3846, 3718, 3974,
          3590, 3846, 3718, 3974, 3590, 3846, 3718, 3974, 3590, 3846, 3718,
          3974, 3590, 3846, 3718, 3974, 3588, 3844, 3716, 3972, 3588, 3844,
          3716, 3972, 3588, 3844, 3716, 3972, 3588, 3844, 3716, 3972, 3588,
          3844, 3716, 3972, 3588, 3844, 3716, 3972, 3588, 3844, 3716, 3972,
          3588, 3844, 3716, 3972, 3590, 3846, 3718, 3974, 3590, 3846, 3718,
          3974, 3590, 3846, 3718, 3974, 3590, 3846, 3718, 3974, 3590, 3846,
          3718, 3974, 3590, 3846, 3718, 3974, 3590, 3846, 3718, 3974, 3590,
          3846, 3718, 3974, 3585, 3841, 3713, 3969, 3585, 3841, 3713, 3969,
          3585, 3841, 3713, 3969, 3585, 3841, 3713, 3969, 3585, 3841, 3713,
          3969, 3585, 3841, 3713, 3969, 3585, 3841, 3713, 3969, 3585, 3841,
          3713, 3969, 3587, 3843, 3715, 3971, 3587, 3843, 3715, 3971, 3587,
          3843, 3715, 3971, 3587, 3843, 3715, 3971, 3587, 3843, 3715, 3971,
          3587, 3843, 3715, 3971, 3587, 3843, 3715, 3971, 3587, 3843, 3715,
          3971, 3585, 3841, 3713, 3969, 3585, 3841, 3713, 3969, 3585, 3841,
          3713, 3969, 3585, 3841, 3713, 3969, 3585, 3841, 3713, 3969, 3585,
          3841, 3713, 3969, 3585, 3841, 3713, 3969, 3585, 3841, 3713, 3969,
          3587, 3843, 3715, 3971, 3587, 3843, 3715, 3971, 3587, 3843, 3715,
          3971, 3587, 3843, 3715, 3971, 3587, 3843, 3715, 3971, 3587, 3843,
          3715, 3971, 3587, 3843, 3715, 3971, 3587, 3843, 3715, 3971, 3589,
          3845, 3717, 3973, 3589, 3845, 3717, 3973, 3589, 3845, 3717, 3973,
          3589, 3845, 3717, 3973, 3589, 3845, 3717, 3973, 3589, 3845, 3717,
          3973, 3589, 3845, 3717, 3973, 3589, 3845, 3717, 3973, 3591, 3847,
          3719, 3975, 3591, 3847, 3719, 3975, 3591, 3847, 3719, 3975, 3591,
          3847, 3719, 3975, 3591, 3847, 3719, 3975, 3591, 3847, 3719, 3975,
          3591, 3847, 3719, 3975, 3591, 3847, 3719, 3975, 3589, 3845, 3717,
          3973, 3589, 3845, 3717, 3973, 3589, 3845, 3717, 3973, 3589, 3845,
          3717, 3973, 3589, 3845, 3717, 3973, 3589, 3845, 3717, 3973, 3589,
          3845, 3717, 3973, 3589, 3845, 3717, 3973, 3591, 3847, 3719, 3975,
          3591, 3847, 3719, 3975, 3591, 3847, 3719, 3975, 3591, 3847, 3719,
          3975, 3591, 3847, 3719, 3975, 3591, 3847, 3719, 3975, 3591, 3847,
          3719, 3975, 3591, 3847, 3719, 3975
            ]
    expected_local = [
          7680, 7936, 7808, 8064, 7744, 8000, 7872, 8128, 7712, 7968, 7840,
          8096, 7776, 8032, 7904, 8160, 7696, 7952, 7824, 8080, 7760, 8016,
          7888, 8144, 7728, 7984, 7856, 8112, 7792, 8048, 7920, 8176, 7682,
          7938, 7810, 8066, 7746, 8002, 7874, 8130, 7714, 7970, 7842, 8098,
          7778, 8034, 7906, 8162, 7698, 7954, 7826, 8082, 7762, 8018, 7890,
          8146, 7730, 7986, 7858, 8114, 7794, 8050, 7922, 8178, 7688, 7944,
          7816, 8072, 7752, 8008, 7880, 8136, 7720, 7976, 7848, 8104, 7784,
          8040, 7912, 8168, 7704, 7960, 7832, 8088, 7768, 8024, 7896, 8152,
          7736, 7992, 7864, 8120, 7800, 8056, 7928, 8184, 7690, 7946, 7818,
          8074, 7754, 8010, 7882, 8138, 7722, 7978, 7850, 8106, 7786, 8042,
          7914, 8170, 7706, 7962, 7834, 8090, 7770, 8026, 7898, 8154, 7738,
          7994, 7866, 8122, 7802, 8058, 7930, 8186, 7684, 7940, 7812, 8068,
          7748, 8004, 7876, 8132, 7716, 7972, 7844, 8100, 7780, 8036, 7908,
          8164, 7700, 7956, 7828, 8084, 7764, 8020, 7892, 8148, 7732, 7988,
          7860, 8116, 7796, 8052, 7924, 8180, 7686, 7942, 7814, 8070, 7750,
          8006, 7878, 8134, 7718, 7974, 7846, 8102, 7782, 8038, 7910, 8166,
          7702, 7958, 7830, 8086, 7766, 8022, 7894, 8150, 7734, 7990, 7862,
          8118, 7798, 8054, 7926, 8182, 7692, 7948, 7820, 8076, 7756, 8012,
          7884, 8140, 7724, 7980, 7852, 8108, 7788, 8044, 7916, 8172, 7708,
          7964, 7836, 8092, 7772, 8028, 7900, 8156, 7740, 7996, 7868, 8124,
          7804, 8060, 7932, 8188, 7694, 7950, 7822, 8078, 7758, 8014, 7886,
          8142, 7726, 7982, 7854, 8110, 7790, 8046, 7918, 8174, 7710, 7966,
          7838, 8094, 7774, 8030, 7902, 8158, 7742, 7998, 7870, 8126, 7806,
          8062, 7934, 8190, 7681, 7937, 7809, 8065, 7745, 8001, 7873, 8129,
          7713, 7969, 7841, 8097, 7777, 8033, 7905, 8161, 7697, 7953, 7825,
          8081, 7761, 8017, 7889, 8145, 7729, 7985, 7857, 8113, 7793, 8049,
          7921, 8177, 7683, 7939, 7811, 8067, 7747, 8003, 7875, 8131, 7715,
          7971, 7843, 8099, 7779, 8035, 7907, 8163, 7699, 7955, 7827, 8083,
          7763, 8019, 7891, 8147, 7731, 7987, 7859, 8115, 7795, 8051, 7923,
          8179, 7689, 7945, 7817, 8073, 7753, 8009, 7881, 8137, 7721, 7977,
          7849, 8105, 7785, 8041, 7913, 8169, 7705, 7961, 7833, 8089, 7769,
          8025, 7897, 8153, 7737, 7993, 7865, 8121, 7801, 8057, 7929, 8185,
          7691, 7947, 7819, 8075, 7755, 8011, 7883, 8139, 7723, 7979, 7851,
          8107, 7787, 8043, 7915, 8171, 7707, 7963, 7835, 8091, 7771, 8027,
          7899, 8155, 7739, 7995, 7867, 8123, 7803, 8059, 7931, 8187, 7685,
          7941, 7813, 8069, 7749, 8005, 7877, 8133, 7717, 7973, 7845, 8101,
          7781, 8037, 7909, 8165, 7701, 7957, 7829, 8085, 7765, 8021, 7893,
          8149, 7733, 7989, 7861, 8117, 7797, 8053, 7925, 8181, 7687, 7943,
          7815, 8071, 7751, 8007, 7879, 8135, 7719, 7975, 7847, 8103, 7783,
          8039, 7911, 8167, 7703, 7959, 7831, 8087, 7767, 8023, 7895, 8151,
          7735, 7991, 7863, 8119, 7799, 8055, 7927, 8183, 7693, 7949, 7821,
          8077, 7757, 8013, 7885, 8141, 7725, 7981, 7853, 8109, 7789, 8045,
          7917, 8173, 7709, 7965, 7837, 8093, 7773, 8029, 7901, 8157, 7741,
          7997, 7869, 8125, 7805, 8061, 7933, 8189, 7695, 7951, 7823, 8079,
          7759, 8015, 7887, 8143, 7727, 7983, 7855, 8111, 7791, 8047, 7919,
          8175, 7711, 7967, 7839, 8095, 7775, 8031, 7903, 8159, 7743, 7999,
          7871, 8127, 7807, 8063, 7935, 8191
          ]

    assert result_remote == expected_remote, 'get_flag_from_options fail'
    assert result_local == expected_local, 'get_flag_from_options fail'

def test_init_curses():
    """init_curses method calls __init_curses method,
    which sets up terminal for us to use
    (keyboard input, colors etc.)
    We don`t test it here.
    It also sets up several terminal window-related attributes,
    line_colors among others.
    Only line_colors attribute is tested.
    """
    ui = UI(__version__)
    ui.init_curses()

    expected_result = {
      'client': {'cursor': 262656, 'default': 512, 'yellow': 2098432},
      'cpu': {'cursor': 262656, 'default': 0, 'yellow': 2098432},
      'database': {'cursor': 262656, 'default': 2099712, 'yellow': 2098432},
      'mem': {'cursor': 262656, 'default': 0, 'yellow': 2098432},
      'mode_red': {'cursor': 262656, 'default': 2097920, 'yellow': 2098432},
      'mode_yellow': {'cursor': 262656, 'default': 2098432, 'yellow': 2098432},
      'pid': {'cursor': 262656, 'default': 512, 'yellow': 2098432},
      'query': {'cursor': 262656, 'default': 0, 'yellow': 2098432},
      'read': {'cursor': 262656, 'default': 0, 'yellow': 2098432},
      'relation': {'cursor': 262656, 'default': 512, 'yellow': 2098432},
      'time_green': {'cursor': 262656, 'default': 1024, 'yellow': 2098432},
      'time_red': {'cursor': 262656, 'default': 768, 'yellow': 2098432},
      'time_yellow': {'cursor': 262656, 'default': 1280, 'yellow': 2098432},
      'type': {'cursor': 262656, 'default': 0, 'yellow': 2098432},
      'user': {'cursor': 262656, 'default': 2099712, 'yellow': 2098432},
      'wait_green': {'cursor': 262656, 'default': 2098176, 'yellow': 2098432},
      'wait_red': {'cursor': 262656, 'default': 2097920, 'yellow': 2098432},
      'write': {'cursor': 262656, 'default': 0, 'yellow': 2098432}
    }

    assert ui.line_colors == expected_result, 'init_curses fail'


if __name__ == '__main__':
    test_bytes2human()
    test_get_flag_from_options()
    test_init_curses()